<?php
/**
 * Created by PhpStorm.
 * User: mrozk
 * Date: 15.05.14
 * Time: 23:14
 */
error_reporting(E_ERROR);
use DDelivery\Order\DDeliveryOrder;
use DDelivery\Order\DDeliveryProduct;
use DDelivery\Order\DDStatusProvider;


if (!defined('_JEXEC')) define( '_JEXEC', 1 );
//if (!defined('DS')) define( 'DS', DIRECTORY_SEPARATOR );
//if (!defined('JPATH_BASE')){ 
    define ('JROOT', substr(dirname (__FILE__),0,strpos(dirname (__FILE__),DIRECTORY_SEPARATOR.'administrator')));
    define ('JPATH_BASE', substr(dirname (__FILE__),0,strpos(dirname (__FILE__),DIRECTORY_SEPARATOR.'administrator')));
  //  }
require_once ( JROOT .'/libraries/loader.php' );
spl_autoload_register(function ($class){ JLoader::load($class);});
require_once ( JROOT .DS.'includes'.DS.'defines.php' );
require_once ( JROOT .DS.'includes'.DS.'framework.php' );
    //jimport('joomla.plugin.helper');
require_once ( JPATH_SITE .DS.'components'.DS.'com_virtuemart'.DS.'virtuemart_parser.php' );
require_once ( JPATH_ADMINISTRATOR .DS.'components'.DS.'com_virtuemart'.DS.'classes'.DS.'ps_product.php' );
require_once ( JPATH_ADMINISTRATOR .DS.'components'.DS.'com_virtuemart'.DS.'classes'.DS.'ps_user.php' );

class IntegratorShop extends \DDelivery\Adapter\PluginFilters
{
    /**
     * Синхронизация локальных статусов
     * @var array
     */
    protected  $cmsOrderStatus = array( DDStatusProvider::ORDER_IN_PROGRESS => 'P',
                                        DDStatusProvider::ORDER_CONFIRMED => 'C',
                                        DDStatusProvider::ORDER_IN_STOCK => 'C',
                                        DDStatusProvider::ORDER_IN_WAY => 'C',
                                        DDStatusProvider::ORDER_DELIVERED => 'S',
                                        DDStatusProvider::ORDER_RECEIVED => 'S',
                                        DDStatusProvider::ORDER_RETURN => 'R',
                                        DDStatusProvider::ORDER_CUSTOMER_RETURNED => 'R',
                                        DDStatusProvider::ORDER_PARTIAL_REFUND => 'R',
                                        DDStatusProvider::ORDER_RETURNED_MI => 'R',
                                        DDStatusProvider::ORDER_WAITING => 'C',
                                        DDStatusProvider::ORDER_CANCEL => 'X' );
    
    public function getConfig($param, $default = null){
        //$component = JComponentHelper::getComponent('com_ddelivery');
        //$component1 = JComponentHelper::getComponent('com_content');
        $params = JComponentHelper::getParams('com_ddelivery');
        //print_r($params);
        //print_r($component);
        //echo '<br />';
        //print_r($component1);
        
        return $params->get($param, $default);
    }
    
    /**
     * Верните true если нужно использовать тестовый(stage) сервер
     * @return bool
     */
    public function isTestMode()
    {
        return ($this->getConfig('workmode') == 'test');
        // TODO: Change the autogenerated stub
    }


    /**
     * Возвращает товары находящиеся в корзине пользователя, будет вызван один раз, затем закеширован
     * @return DDeliveryProduct[]
     */
    protected function _getProductsFromCart()
    {
        $ps_prod = new ps_product;
        $products = array();
        $cart = $_SESSION['cart'];
        //echo 'width field: '.$this->getConfig('widthmerge');
        //echo 'width: '.$this->getConfig('width');
        if (is_array($cart) && count($cart)){
            foreach($cart as $idx => $prod){
                $prod['product_id'] = (int)$prod['product_id'];
                
                if ($idx !== 'idx'){
                    $price = $ps_prod->get_price($prod['product_id']);
                    $products[] = new DDeliveryProduct(
                        $prod['product_id'],	//	int $id id товара в системе и-нет магазина
                        ((double)$ps_prod->get_field($prod['product_id'],$this->getConfig('widthmerge'))>0)?$ps_prod->get_field($prod['product_id'],$this->getConfig('widthmerge')):$this->getConfig('width'),	//	float $width длинна
                        ((double)$ps_prod->get_field($prod['product_id'],$this->getConfig('heightmerge'))>0)?$ps_prod->get_field($prod['product_id'],$this->getConfig('heightmerge')):$this->getConfig('height'),	//	float $height высота
                        ((double)$ps_prod->get_field($prod['product_id'],$this->getConfig('lengthmerge'))>0)?$ps_prod->get_field($prod['product_id'],$this->getConfig('lengthmerge')):$this->getConfig('dlina'),	//	float $length ширина
                        ((double)$ps_prod->get_field($prod['product_id'],$this->getConfig('weightmerge'))>0)?$ps_prod->get_field($prod['product_id'],$this->getConfig('weightmerge')):$this->getConfig('weight'),	//	float $weight вес кг
                        ((double)$price['product_price']>0)?(double)$price['product_price']:$this->getConfig('ocencost'),	//	float $price стоимостьв рублях
                        (int)$prod['quantity'],	//	int $quantity количество товара
                        $ps_prod->get_field($prod['product_id'],'product_name').' '.$prod['description']	//	string $name Название вещи
                    );
                }
            }
        }
        //echo '<pre>'.print_r($products).'</pre>';
        return $products;
    }

    /**
     * Меняет статус внутреннего заказа cms
     *
     * @param $cmsOrderID - id заказа
     * @param $status - статус заказа для обновления
     *
     * @return bool
     */
    public function setCmsOrderStatus($cmsOrderID, $status)
    {
        // TODO: Implement setCmsOrderStatus() method.
        $ps_order = new ps_order();
        $d = array();
        $d['order_id'] = (int)$cmsOrderID;
        $d['order_status'] = $status;
        return $ps_order->order_status_update($d);
        
    }
    
    public function getStatusToSendOrder(){
        return $this->getConfig('orderstatuscode');
    }

    /**
     * Возвращает API ключ, вы можете получить его для Вашего приложения в личном кабинете
     * @return string
     */
    public function getApiKey()
    {
        return $this->getConfig('apikey','852af44bafef22e96d8277f3227f0998'); 
    }

    /**
     * Должен вернуть url до каталога с статикой
     * @return string
     */
    public function getStaticPath()
    {
        return '../html/';
    }

    /**
     * URL до скрипта где вызывается DDelivery::render
     * @return string
     */
    public function getPhpScriptURL()
    {
        // Тоесть до этого файла
        return 'ajax.php';
    }

    /**
     * Возвращает путь до файла базы данных, положите его в место не доступное по прямой ссылке
     * @return string
     */
    public function getPathByDB()
    {
        return __DIR__.'/../db/db.sqlite';
    }

    /**
     * Метод будет вызван когда пользователь закончит выбор способа доставки
     *
     * @param int $orderId
     * @param \DDelivery\Order\DDeliveryOrder $order
     * @param bool $customPoint Если true, то заказ обрабатывается магазином
     * @return void
     */
    public function onFinishChange($orderId, \DDelivery\Order\DDeliveryOrder $order, $customPoint)
    {
        if($customPoint){
            // Это условие говорит о том что нужно обрабатывать заказ средствами CMS
        }else{

        }
        //echo '<pre>'.print_r($order).'</pre>';
        //print_r($orderId);
        $_SESSION['DIGITAL_DELIVERY']['ORDER_ID'] = (int)$orderId;
        //$_SESSION['DIGITAL_DELIVERY']['AMOUNT'] = (int)$order->amount;
        //$_SESSION['DIGITAL_DELIVERY']['ORDER_ID'] = (int)$orderId;

    }
    
    public function isStatusToSendOrder($status){
        //JFactory::getApplication()->enqueueMessage('func isStatusToSendOrder ' . ' status: ' .$status. ' config: '. $this->getConfig('orderstatuscode','C'));
        return ($status == $this->getConfig('orderstatuscode','C'))? 1 :0;
    }

    /**
     * Какой процент от стоимости страхуется
     * @return float
     */
    public function getDeclaredPercent()
    {
        
        return $this->getConfig('declaredpercent');
    }

    /**
     * Должен вернуть те компании которые НЕ показываются в курьерке
     * см. список компаний в DDeliveryUI::getCompanySubInfo()
     * @return int[]
     */
    public function filterCompanyPointCourier()
    {
        $companies = array();
        for ($i=1;$i<=41;$i++){
            if ($this->getConfig('curier_company'.$i))
            $companies[] = $this->getConfig('curier_company'.$i); 
        }
        return $companies;
        // TODO: Implement filterCompanyPointCourier() method.
    }

    /**
     * Должен вернуть те компании которые НЕ показываются в самовывозе
     * см. список компаний в DDeliveryUI::getCompanySubInfo()
     * @return int[]
     */
    public function filterCompanyPointSelf()
    {
        $companies = array();
        for ($i=1;$i<=41;$i++){
            if ($this->getConfig('company'.$i))
            $companies[] = $this->getConfig('company'.$i); 
        }
        return $companies;
        // TODO: Implement filterCompanyPointSelf() method.
    }
    
    public function getPaymentPriceSelf( $order, $orderPrice )
    {
        $filterByPayment = $this->filterPointByPaymentTypeSelf();
        if($filterByPayment == $order->paymentVariant){
            if($order->getPoint() && $order->getPoint()->getDeliveryInfo()) {
                return $order->amount + $order->getPoint()->getDeliveryInfo()->clientPrice;
            }
            return $order->amount;
         }
        return 0;
    }
    
    public function getPaymentPriceCourier( $order, $orderPrice )
    {
        $filterByPayment = $this->filterPointByPaymentTypeCourier();
        if($filterByPayment == $order->paymentVariant){
            if($order->getPoint() && $order->getPoint()->getDeliveryInfo()) {
                return $order->amount + $order->getPoint()->getDeliveryInfo()->clientPrice;
            }
            return $order->amount;
         }
        return 0;
    }

    /**
     * Возвращаем способ оплаты константой PluginFilters::PAYMENT_, предоплата или оплата на месте. Курьер
     * @return int
     */
    public function filterPointByPaymentTypeCourier()
    {
        return (int)$this->getConfig('curier_payment');
        return self::PAYMENT_POST_PAYMENT;
        // выбираем один из 3 вариантов(см документацию или комменты к констатам)
        return self::PAYMENT_POST_PAYMENT;
        return self::PAYMENT_PREPAYMENT;
        return self::PAYMENT_NOT_CARE;
        // TODO: Implement filterPointByPaymentTypeCourier() method.
    }

    /**
     * Возвращаем способ оплаты константой PluginFilters::PAYMENT_, предоплата или оплата на месте. Самовывоз
     * @return int
     */
    public function filterPointByPaymentTypeSelf()
    {
        return (int)$this->getConfig('payment');
        return self::PAYMENT_POST_PAYMENT;
        // выбираем один из 3 вариантов(см документацию или комменты к констатам)
        return self::PAYMENT_POST_PAYMENT;
        return self::PAYMENT_PREPAYMENT;
        return self::PAYMENT_NOT_CARE;
        // TODO: Implement filterPointByPaymentTypeSelf() method.
    }

    /**
     * Если true, то не учитывает цену забора
     * @return bool
     */
    public function isPayPickup()
    {
        return ((int)$this->getConfig('ispaypickup') == 1);
        // TODO: Implement isPayPickup() method.
    }

    /**
     * Метод возвращает настройки оплаты фильтра которые должны быть собраны из админки
     *
     * @return array
     */
    public function getIntervalsByPoint()
    {
        //return array();
        $return = array();
        for ($i=1;$i<=3;$i++){
            //if ((double)$this->getConfig("cond$i") && (double)$this->getConfig("cond{$i}_2") && (double)$this->getConfig("condperbymag$i")){
                switch($this->getConfig("condres$i")){
                    case 'magpercent' : $type = self::INTERVAL_RULES_MARKET_PERCENT; break; 
                    case 'fix' : $type = self::INTERVAL_RULES_MARKET_AMOUNT; break; 
                    case 'client' : $type = self::INTERVAL_RULES_CLIENT_ALL; break;
                    default: $type = $type = self::INTERVAL_RULES_MARKET_ALL;
                }
                $return[] = array(
                    'min' => $this->getConfig("cond$i"),
                    'max' => $this->getConfig("cond{$i}_2"),
                    'type' => $type,
                    'amount' => $this->getConfig("condperbymag$i"),
                );
            //}    
        }
        //print_r($return);
        return $return;
        
        /*return array(
            array('min' => 0, 'max'=>100, 'type'=>self::INTERVAL_RULES_MARKET_AMOUNT, 'amount'=>30),
            array('min' => 100, 'max'=>200, 'type'=>self::INTERVAL_RULES_CLIENT_ALL, 'amount'=>60),
            array('min' => 300, 'max'=>400, 'type'=>self::INTERVAL_RULES_MARKET_PERCENT, 'amount'=>3),
            array('min' => 1000, 'max'=>null, 'type'=>self::INTERVAL_RULES_MARKET_ALL),
        );
        */
    }

    /**
     * Тип округления
     * @return int
     */
    public function aroundPriceType()
    {
        if ($this->getConfig('aroundpricetype') == 'floor') return self::AROUND_FLOOR;
        elseif ($this->getConfig('aroundpricetype') == 'ceil') return self::AROUND_CEIL;
        else return self::AROUND_ROUND; // 
    }

    /**
     * Шаг округления
     * @return float
     */
    public function aroundPriceStep()
    {
        return (double)$this->getConfig('aroundpricestep'); // До 50 копеек
        // TODO: Implement aroundPriceStep() method.
    }

    /**
     * описание собственных служб доставки
     * @return string
     */
    public function getCustomPointsString()
    {
        return $this->getConfig('custom_points_string');
    }

    /**
     * Если вы знаете имя покупателя, сделайте чтобы оно вернулось в этом методе
     * @return string|null
     */
    public function getClientFirstName() {
        $user = $this->getUser();
        $first_name = $this->getConfig('first_name');
        if ($first_name)
            return $user->$first_name;
        else return '';
    }

    /**
     * Если вы знаете фамилию покупателя, сделайте чтобы оно вернулось в этом методе
     * @return string|null
     */
    public function getClientLastName() {
        $user = $this->getUser();
        $last_name = $this->getConfig('last_name');
            
        if ($last_name) return $user->$last_name;
        else return '';
    }

    /**
     * Если вы знаете телефон покупателя, сделайте чтобы оно вернулось в этом методе. 11 символов, например 79211234567
     * @return string|null
     */
    public function getClientPhone() {
        $user = $this->getUser();
        $phone = $this->getConfig('phone');
        if ($phone){
            $phone = preg_replace('/[^0-9]/', '', $user->$phone);
            if(strlen($phone) && $phone{0} == '8') {
                $phone{0} = 7;
                }
            return $phone;
        }
        else return '';
    }

    /**
     * Верни массив Адрес, Дом, Корпус, Квартира. Если не можешь можно вернуть все в одном поле и настроить через get*RequiredFields
     * @return string[]
     */
    public function getClientAddress() {
        $user = $this->getUser();
        $return = array();
        $address = $this->getConfig('address','');
        $house = $this->getConfig('house','');
        $corpus = $this->getConfig('corpus','');
        $flat = $this->getConfig('flat','');
        //print_r($user);

        $return[] = ($address)?$user->$address:'';
        $return[] = ($house)?$user->$house:'';
        $return[] = ($corpus)?$user->$corpus:'';
        $return[] = ($flat)?$user->$flat:'';
        
        return $return;
    }

    /**
     * Верните id города в системе DDelivery
     * @return int
     */
    public function getClientCityId()
    {
        $db = JFactory::getDBO();
        $city_field = $this->getConfig('city','city');
        if ($city_field){
            $user = $this->getUser();
            $q = 'select _id from ddelivery_module_ps_dd_cities where name='.$db->quote($user->$city_field);
            $db->setQuery($q);
            $id = $db->loadResult();
        }
        if (!(int)$id) 
            // Если нет информации о городе, оставьте вызов родительского метода.
            return parent::getClientCityId();
    }

    /**
     * Возвращает поддерживаемые магазином способы доставки
     * @return array
     */
    public function getSupportedType()
    {
        $serv = $this->getConfig('services');
        
        
        if ($serv == 'self')
            $return = array(
                \DDelivery\Sdk\DDeliverySDK::TYPE_SELF
            );
        elseif($serv == 'curier')
            $return = array(
                \DDelivery\Sdk\DDeliverySDK::TYPE_COURIER
            );
        else    
            $return = array(
            \DDelivery\Sdk\DDeliverySDK::TYPE_COURIER,
            \DDelivery\Sdk\DDeliverySDK::TYPE_SELF
        );
        return $return;
    }

    /**
     * Если необходимо фильтрует пункты самовывоза и добавляет новые
     *
     * @param \DDelivery\Point\DDeliveryPointSelf[] $selfPoints
     * @param DDeliveryOrder $order
     * @return \DDelivery\Point\DDeliveryPointSelf[]
     */
    public function filterPointsSelf($selfPoints, DDeliveryOrder $order)
    {

        $selfPoints = parent::filterPointsSelf($selfPoints, $order);
        /* пример установки собственного магазина на карту
        $myCourier = new \DDelivery\Point\PointSelfCustom(
            1, 'Моя компания', 'Петропавловская крепость, 8',
            59.950236, 30.31537, 100, 0, 'Ежедневно с 10 до 22',
            '', ''
        );
        $selfPoints[] = $myCourier;
        */
        return $selfPoints;
    }
    
    public function getUser(){
        $ps_user = new ps_user;
        $id = (JFactory::getUser()->id)?JFactory::getUser()->id:$_SESSION['auth']['user_id'];
        $user = $ps_user->getUserInfo($id);
        //print_r($user);
        return $user->record[0];

    }
    
    public function getDbConfig(){
        $config = JFactory::getConfig();
        $user = $config->getValue('config.user');
        $host = $config->getValue('config.host');
        $db = $config->getValue('config.db');
        $pref = 'ps_dd_';
        $pass = $config->getValue('config.password');
               
        $return = array(
            'pdo' => new \PDO("mysql:host=$host;dbname=$db", $user, $pass, array(\PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8")),
            'prefix' => $pref,
        );
        return $return;
    }
    
    

}